grf {
    grfid:                  "BY\01\01";
    name:                   string(STR_GRF_NAME);
    desc:                   string(STR_GRF_DESCRIPTION);
    url:                    string(STR_GRF_URL);
    version:                1.1;
    min_compatible_version: 0;

    param {
        param_replace_default_graphics {
            type: bool;
            name: string(STR_PARAM_REPLACE_DEFAULT_NAME);
            desc: string(STR_PARAM_REPLACE_DEFAULT_DESC);
            def_value: 1;
        }
    }
    param {
        param_use_double_headed_block {
            type: bool;
            name: string(STR_PARAM_USE_DOUBLE_BLOCK_NAME);
            desc: string(STR_PARAM_USE_DOUBLE_BLOCK_DESC);
            def_value: 0;
        }
    }
    param {
        param_signal_gui_row_1 {
            type: int;
            name: string(STR_PARAM_SIGNAL_ROW_1_NAME);
            desc: string(STR_PARAM_SIGNAL_ROW_1_DESC);
            def_value: 0;
            min_value: 0;
            max_value: 3;
            names: {
                0: string(STR_PARAM_VALUE_SEMAPHORE);
                1: string(STR_PARAM_VALUE_SEARCHLIGHT);
                2: string(STR_PARAM_VALUE_COLORLIGHT);
                3: string(STR_PARAM_VALUE_BOPOSITION);
            };
        }
    }
    param {
        param_signal_gui_row_2 {
            type: int;
            name: string(STR_PARAM_SIGNAL_ROW_2_NAME);
            desc: string(STR_PARAM_SIGNAL_ROW_2_DESC);
            def_value: 1;
            min_value: 0;
            max_value: 3;
            names: {
                0: string(STR_PARAM_VALUE_SEMAPHORE);
                1: string(STR_PARAM_VALUE_SEARCHLIGHT);
                2: string(STR_PARAM_VALUE_COLORLIGHT);
                3: string(STR_PARAM_VALUE_BOPOSITION);
            };
        }
    }
}

if (!extended_feature_test("action3_signals_custom_signal_sprites")) {
    error(FATAL, string(STR_UNSUPPORTED_VERSION));
}

// Commented by osswix and big mostly

// template for spriteset :
// spriteset([name], "file location"){[template_specific](x,y)}
// where file location is the location of the image containing the sprites
// template_specific is the template relevant to the sprites
// x and y are the starting coordinates of the first sprite in the set
//
// For this american set the following setup will be used
//
// For single aspect signals there will be three states:
// CLR  clear
// APR  approach
// STP  stop
//
// for two aspect signals there is a more extended variety of states,
// these states differe between block and path signals to somewhat
// emulate a realistic situation, the states are as follows
//
// for 2 aspect block signals:
// CLR  clear
// AAL  advanced approach limited
// APM  approach medium
// AAP  advanced approach
// APR  approach
// STP  stop
//
// for 2 aspect path signals:
// CLR  clear
// MCL  medium clear
// APR  approach
// STP  stop
//
// for 3 aspect block signals:
// CLR  clear
// AAL  advanced approach limited
// APM  approach medium
// APS  approach slow
// APR  approach
// STP  stop
//
// for 3 aspect path signals:
// CLR  clear
// LCL  limited clear
// MCL  medium clear
// SCL  slow clear
// STP  stop
//
// the following abbriviations are used
// SA, DA, TA for single, double, and triple aspect respectively
// B for block and P for path.
// S for semaphore and L for light with other variations to later be added.

/*
The graphics are organized into a grid.
Each column cycles between RYG, then by orientation.
Each row is exactly 3 aspects, based on secondary aspect.
The rows are ordered as:
- single-head
- double-head, G top
- double-head, Y top
- double-head, R top
*/

// template [template name](x, y){
//  [x, y, sizex, sizey, offsetx offsety]
// }

/*
Each signal is 16x32px, with 1 pixel in between on all sides.
=> Each signal has their top left corner on (17i, 33j), where i >= 0 and j >= 0.
Different orientations of the same aspect are located on the same row, 17*3 = 51px on the x-axis.
*/
template cell(x, y, n, k) { [17*x+17*k*n, 33*y, 16, 32, -8, -32] }
template aspect_cell(x, y, n) { cell(x, y, n, 3) }

// x and y are the 0-indexed col/row number of the signal
template aspect(signalRow, aspectColumn) {
    aspect_cell(aspectColumn, signalRow, 0)
    aspect_cell(aspectColumn, signalRow, 1)
    aspect_cell(aspectColumn, signalRow, 2)
    aspect_cell(aspectColumn, signalRow, 3)
    aspect_cell(aspectColumn, signalRow, 4)
    aspect_cell(aspectColumn, signalRow, 5)
    aspect_cell(aspectColumn, signalRow, 6)
    aspect_cell(aspectColumn, signalRow, 7)
}
template consecutive(signalRow, aspectColumn) {
    cell(aspectColumn, signalRow, 0, 1)
    cell(aspectColumn, signalRow, 1, 1)
    cell(aspectColumn, signalRow, 2, 1)
    cell(aspectColumn, signalRow, 3, 1)
    cell(aspectColumn, signalRow, 4, 1)
    cell(aspectColumn, signalRow, 5, 1)
    cell(aspectColumn, signalRow, 6, 1)
    cell(aspectColumn, signalRow, 7, 1)
}

//!SPRITES!//

spriteset(signal_single_block_boposition_CLR, "gfx/1-and-2-head.png"){aspect(12, 2)}
spriteset(signal_single_block_boposition_APR, "gfx/1-and-2-head.png"){aspect(12, 1)}
spriteset(signal_single_block_boposition_STP, "gfx/1-and-2-head.png"){aspect(12, 0)}

spriteset(signal_double_block_boposition_CLR, "gfx/1-and-2-head.png"){aspect(13, 2)}
spriteset(signal_double_block_boposition_AAL, "gfx/1-and-2-head.png"){aspect(13, 1)}
spriteset(signal_double_block_boposition_APM, "gfx/1-and-2-head.png"){aspect(13, 1)}
spriteset(signal_double_block_boposition_AAP, "gfx/1-and-2-head.png"){aspect(13, 1)}
spriteset(signal_double_block_boposition_APR, "gfx/1-and-2-head.png"){aspect(13, 1)}
spriteset(signal_double_block_boposition_STP, "gfx/1-and-2-head.png"){aspect(13, 0)}

spriteset(signal_double_path_boposition_CLR, "gfx/1-and-2-head.png"){aspect(13, 2)}
spriteset(signal_double_path_boposition_MCL, "gfx/1-and-2-head.png"){aspect(13, 1)}
spriteset(signal_double_path_boposition_APR, "gfx/1-and-2-head.png"){aspect(13, 1)}
spriteset(signal_double_path_boposition_STP, "gfx/1-and-2-head.png"){aspect(13, 0)}

spriteset(signal_double_onewaypath_boposition_CLR, "gfx/1-and-2-head.png"){aspect(13, 26)}
spriteset(signal_double_onewaypath_boposition_MCL, "gfx/1-and-2-head.png"){aspect(13, 25)}
spriteset(signal_double_onewaypath_boposition_APR, "gfx/1-and-2-head.png"){aspect(13, 25)}
spriteset(signal_double_onewaypath_boposition_STP, "gfx/1-and-2-head.png"){aspect(13, 24)}

spriteset(signal_noentry, "gfx/1-and-2-head.png"){consecutive(14,0)}

//Switches use the following format:
//switch(FEAT_SIGNALS, SELF, [name], [variable]{
//  value: result;
//  value: result;
//  return result; //Giving a "return result" at the end will give a default value when none of the other values have been met by the variable
//}
//The name can be any text string you like.
//The variables are pre-selected here to give the correct results
//The result can be a spriteset or another switch
//
//This switch decides which spriteset to use for each signal aspect for one signal type
//
//These are the templates of all switches in 'chronological' order:
//
// first bit is order of aspects, with a maximum of 7 (0-6)
//switch(FEAT_SIGNALS, SELF, newname, getbits(extra_callback_info2, 0, 8)){
//  00: stop signal;
//  01: highest clearance;
//  05: one step lower:
//  04: one step lower:
//  03: one step lower:
//  02: one step lower:
//}
//switch(FEAT_SIGNALS, SELF, newname, getbits(extra_callback_info2, 8, 8)){
//  00: signal;
//  01: semaphore;
//}
//
//  note in the following programmable and no entry need to be enabled
//switch(FEAT_SIGNALS, SELF, newname, getbits(extra_callback_info2, 16, 8)){
//  00: normal;
//  01: entry;
//  02: exit;
//  03: combo;
//  04: path;
//  05: path one way;
//  06: programmable;
//  07: no entry;
//}
//(getbits(extra_callback_info2, 16, 8)

switch(FEAT_SIGNALS, SELF, sw_single_block_semaphore, getbits(extra_callback_info2, 0, 8)){
    00: signal_single_block_semaphore_STP;
    01: signal_single_block_semaphore_CLR;
    05: signal_single_block_semaphore_CLR;
    04: signal_single_block_semaphore_CLR;
    03: signal_single_block_semaphore_CLR;
    02: signal_single_block_semaphore_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_block_semaphore, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_block_semaphore_STP;
    01: signal_double_block_semaphore_CLR;
    05: signal_double_block_semaphore_AAL;
    04: signal_double_block_semaphore_APM;
    03: signal_double_block_semaphore_AAP;
    02: signal_double_block_semaphore_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_path_semaphore, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_path_semaphore_STP;
    01: signal_double_path_semaphore_CLR;
    05: signal_double_path_semaphore_CLR;
    04: signal_double_path_semaphore_CLR;
    03: signal_double_path_semaphore_MCL;
    02: signal_double_path_semaphore_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_onewaypath_semaphore, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_onewaypath_semaphore_STP;
    01: signal_double_onewaypath_semaphore_CLR;
    05: signal_double_onewaypath_semaphore_CLR;
    04: signal_double_onewaypath_semaphore_CLR;
    03: signal_double_onewaypath_semaphore_MCL;
    02: signal_double_onewaypath_semaphore_APR;
}

switch(FEAT_SIGNALS, SELF, sw_semaphore, getbits(extra_callback_info2, 16, 8) << 8 | param_use_double_headed_block){
    0x000: sw_single_block_semaphore;
    0x001: sw_double_block_semaphore;
    0x400..0x401: sw_double_path_semaphore;
    0x500..0x501: sw_double_onewaypath_semaphore;
    0x700..0x701: signal_noentry;
}

switch(FEAT_SIGNALS, SELF, sw_single_block_searchlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_single_block_searchlight_STP;
    01: signal_single_block_searchlight_CLR;
    05: signal_single_block_searchlight_CLR;
    04: signal_single_block_searchlight_CLR;
    03: signal_single_block_searchlight_CLR;
    02: signal_single_block_searchlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_block_searchlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_block_searchlight_STP;
    01: signal_double_block_searchlight_CLR;
    05: signal_double_block_searchlight_AAL;
    04: signal_double_block_searchlight_APM;
    03: signal_double_block_searchlight_AAP;
    02: signal_double_block_searchlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_path_searchlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_path_searchlight_STP;
    01: signal_double_path_searchlight_CLR;
    05: signal_double_path_searchlight_CLR;
    04: signal_double_path_searchlight_CLR;
    03: signal_double_path_searchlight_MCL;
    02: signal_double_path_searchlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_onewaypath_searchlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_onewaypath_searchlight_STP;
    01: signal_double_onewaypath_searchlight_CLR;
    05: signal_double_onewaypath_searchlight_CLR;
    04: signal_double_onewaypath_searchlight_CLR;
    03: signal_double_onewaypath_searchlight_MCL;
    02: signal_double_onewaypath_searchlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_searchlight, getbits(extra_callback_info2, 16, 8) << 8 | param_use_double_headed_block){
    0x000: sw_single_block_searchlight;
    0x001: sw_double_block_searchlight;
    0x400..0x401: sw_double_path_searchlight;
    0x500..0x501: sw_double_onewaypath_searchlight;
    0x700..0x701: signal_noentry;
}

switch(FEAT_SIGNALS, SELF, sw_single_block_colorlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_single_block_colorlight_STP;
    01: signal_single_block_colorlight_CLR;
    05: signal_single_block_colorlight_CLR;
    04: signal_single_block_colorlight_CLR;
    03: signal_single_block_colorlight_CLR;
    02: signal_single_block_colorlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_block_colorlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_block_colorlight_STP;
    01: signal_double_block_colorlight_CLR;
    05: signal_double_block_colorlight_AAL;
    04: signal_double_block_colorlight_APM;
    03: signal_double_block_colorlight_AAP;
    02: signal_double_block_colorlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_path_colorlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_path_colorlight_STP;
    01: signal_double_path_colorlight_CLR;
    05: signal_double_path_colorlight_CLR;
    04: signal_double_path_colorlight_CLR;
    03: signal_double_path_colorlight_MCL;
    02: signal_double_path_colorlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_onewaypath_colorlight, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_onewaypath_colorlight_STP;
    01: signal_double_onewaypath_colorlight_CLR;
    05: signal_double_onewaypath_colorlight_CLR;
    04: signal_double_onewaypath_colorlight_CLR;
    03: signal_double_onewaypath_colorlight_MCL;
    02: signal_double_onewaypath_colorlight_APR;
}

switch(FEAT_SIGNALS, SELF, sw_colorlight, getbits(extra_callback_info2, 16, 8) << 8 | param_use_double_headed_block){
    0x000: sw_single_block_colorlight;
    0x001: sw_double_block_colorlight;
    0x400..0x401: sw_double_path_colorlight;
    0x500..0x501: sw_double_onewaypath_colorlight;
    0x700..0x701: signal_noentry;
}

switch(FEAT_SIGNALS, SELF, sw_single_block_boposition, getbits(extra_callback_info2, 0, 8)){
    00: signal_single_block_boposition_STP;
    01: signal_single_block_boposition_CLR;
    05: signal_single_block_boposition_CLR;
    04: signal_single_block_boposition_CLR;
    03: signal_single_block_boposition_CLR;
    02: signal_single_block_boposition_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_block_boposition, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_block_boposition_STP;
    01: signal_double_block_boposition_CLR;
    05: signal_double_block_boposition_AAL;
    04: signal_double_block_boposition_APM;
    03: signal_double_block_boposition_AAP;
    02: signal_double_block_boposition_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_path_boposition, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_path_boposition_STP;
    01: signal_double_path_boposition_CLR;
    05: signal_double_path_boposition_CLR;
    04: signal_double_path_boposition_CLR;
    03: signal_double_path_boposition_MCL;
    02: signal_double_path_boposition_APR;
}

switch(FEAT_SIGNALS, SELF, sw_double_onewaypath_boposition, getbits(extra_callback_info2, 0, 8)){
    00: signal_double_onewaypath_boposition_STP;
    01: signal_double_onewaypath_boposition_CLR;
    05: signal_double_onewaypath_boposition_CLR;
    04: signal_double_onewaypath_boposition_CLR;
    03: signal_double_onewaypath_boposition_MCL;
    02: signal_double_onewaypath_boposition_APR;
}

switch(FEAT_SIGNALS, SELF, sw_boposition, getbits(extra_callback_info2, 16, 8) << 8 | param_use_double_headed_block){
    0x000: sw_single_block_boposition;
    0x001: sw_double_block_boposition;
    0x400..0x401: sw_double_path_boposition;
    0x500..0x501: sw_double_onewaypath_boposition;
    0x700..0x701: signal_noentry;
}

switch(FEAT_SIGNALS, SELF, sw_signal_styles, signal_style) {
    1: sw_semaphore;
    2: sw_searchlight;
    3: sw_colorlight;
    4: sw_boposition;
}

item (FEAT_SIGNALS, custom_signals, 0) {
    property {
        extra_aspects: 4;
    }
}

switch (FEAT_SIGNALS, SELF, replaced_signals_semaphore, param_signal_gui_row_1) {
    0: sw_semaphore;
    1: sw_searchlight;
    2: sw_colorlight;
    3: sw_boposition;
}
switch (FEAT_SIGNALS, SELF, replaced_signals_electric, param_signal_gui_row_2) {
    0: sw_semaphore;
    1: sw_searchlight;
    2: sw_colorlight;
    3: sw_boposition;
}
switch (FEAT_SIGNALS, SELF, replaced_signals, getbits(extra_callback_info2, 8, 8)) {
    0: replaced_signals_electric;
    1: replaced_signals_semaphore;
}


if (param_replace_default_graphics) {
    item (FEAT_SIGNALS, custom_signals, 0) {
        graphics {
            replaced_signals;
        }
    }
} else {
    item (FEAT_SIGNALS, custom_signals, 0) {
        property {
            define_style:       1; // semaphore
            style_name:         string(STR_SIG_SEMAPHORE);
            style_semaphore_enabled: bitmask(SIGNAL_TYPE_NORMAL, SIGNAL_TYPE_PBS, SIGNAL_TYPE_PBS_ONEWAY, SIGNAL_TYPE_NO_ENTRY);
            enable_no_entry_signals: 1;

            define_style:       2; // searchlight
            style_name:         string(STR_SIG_SEARCHLIGHT);
            style_electric_enabled: bitmask(SIGNAL_TYPE_NORMAL, SIGNAL_TYPE_PBS, SIGNAL_TYPE_PBS_ONEWAY, SIGNAL_TYPE_NO_ENTRY);
            enable_no_entry_signals: 1;
            
            define_style:       3; // colorlight
            style_name:         string(STR_SIG_COLORLIGHT);
            style_electric_enabled: bitmask(SIGNAL_TYPE_NORMAL, SIGNAL_TYPE_PBS, SIGNAL_TYPE_PBS_ONEWAY, SIGNAL_TYPE_NO_ENTRY);
            enable_no_entry_signals: 1;
            
            define_style:       4; // b&o color position
            style_name:         string(STR_SIG_BOPOSITION);
            style_electric_enabled: bitmask(SIGNAL_TYPE_NORMAL, SIGNAL_TYPE_PBS, SIGNAL_TYPE_PBS_ONEWAY, SIGNAL_TYPE_NO_ENTRY);
            enable_no_entry_signals: 1;
        }
        graphics {
            sw_signal_styles;
        }
    }
}
